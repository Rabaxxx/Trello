{
	"info": {
		"_postman_id": "ea99b8d9-8315-46f0-9f94-c5d69a4307bc",
		"name": "trello",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "39928907",
		"_collection_link": "https://entrylvlschool.postman.co/workspace/entry_lvl_krabax~f4c7b252-e746-4359-97d4-766448ebcc68/collection/39928907-ea99b8d9-8315-46f0-9f94-c5d69a4307bc?action=share&source=collection_link&creator=39928907"
	},
	"item": [
		{
			"name": "1.1 ADD BOARD",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let board_id_var = pm.response.json(\"\");\r",
							"console.log(board_id_var['id']);\r",
							"pm.environment.set(\"board_id\",board_id_var['id']);\r",
							"\r",
							"pm.expect(response=200)\r",
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(400);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Presence of required fields\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"\r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.id).to.exist;\r",
							"  pm.expect(responseData.name).to.exist;\r",
							"  pm.expect(responseData.desc).to.exist;\r",
							"  pm.expect(responseData.closed).to.exist;\r",
							"  pm.expect(responseData.url).to.exist;\r",
							"  pm.expect(responseData.prefs).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the schema of the response for Trello board creation\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('id');\r",
							"    pm.expect(responseData).to.have.property('name');\r",
							"    pm.expect(responseData).to.have.property('desc');\r",
							"    pm.expect(responseData).to.have.property('descData');\r",
							"    pm.expect(responseData).to.have.property('closed');\r",
							"    pm.expect(responseData).to.have.property('idOrganization');\r",
							"    pm.expect(responseData).to.have.property('idEnterprise');\r",
							"    pm.expect(responseData).to.have.property('pinned');\r",
							"    pm.expect(responseData).to.have.property('url');\r",
							"    pm.expect(responseData).to.have.property('shortUrl');\r",
							"    pm.expect(responseData).to.have.property('prefs').to.be.an('object');\r",
							"    pm.expect(responseData.prefs).to.have.property('permissionLevel');\r",
							"    pm.expect(responseData.prefs).to.have.property('hideVotes');\r",
							"    pm.expect(responseData.prefs).to.have.property('voting');\r",
							"    pm.expect(responseData.prefs).to.have.property('comments');\r",
							"    pm.expect(responseData.prefs).to.have.property('invitations');\r",
							"    pm.expect(responseData.prefs).to.have.property('selfJoin');\r",
							"    pm.expect(responseData.prefs).to.have.property('cardCovers');\r",
							"    pm.expect(responseData.prefs).to.have.property('cardCounts');\r",
							"    pm.expect(responseData.prefs).to.have.property('isTemplate');\r",
							"    pm.expect(responseData.prefs).to.have.property('cardAging');\r",
							"    pm.expect(responseData.prefs).to.have.property('calendarFeedEnabled');\r",
							"    pm.expect(responseData.prefs).to.have.property('hiddenPluginBoardButtons').to.be.an('array');\r",
							"    pm.expect(responseData.prefs).to.have.property('switcherViews').to.be.an('array');\r",
							"    pm.expect(responseData.prefs.switcherViews[0]).to.have.property('viewType');\r",
							"    pm.expect(responseData.prefs.switcherViews[0]).to.have.property('enabled');\r",
							"    pm.expect(responseData.prefs).to.have.property('background');\r",
							"    pm.expect(responseData.prefs).to.have.property('backgroundColor');\r",
							"    pm.expect(responseData.prefs).to.have.property('backgroundImage');\r",
							"    pm.expect(responseData.prefs).to.have.property('backgroundTile');\r",
							"    pm.expect(responseData.prefs).to.have.property('backgroundBrightness');\r",
							"    pm.expect(responseData.prefs).to.have.property('sharedSourceUrl');\r",
							"    pm.expect(responseData.prefs).to.have.property('backgroundImageScaled');\r",
							"    pm.expect(responseData.prefs).to.have.property('backgroundBottomColor');\r",
							"    pm.expect(responseData.prefs).to.have.property('backgroundTopColor');\r",
							"    pm.expect(responseData.prefs).to.have.property('canBePublic');\r",
							"    pm.expect(responseData.prefs).to.have.property('canBeEnterprise');\r",
							"    pm.expect(responseData.prefs).to.have.property('canBeOrg');\r",
							"    pm.expect(responseData.prefs).to.have.property('canBePrivate');\r",
							"    pm.expect(responseData.prefs).to.have.property('canInvite');\r",
							"    pm.expect(responseData).to.have.property('labelNames').to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('limits');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Label names object is present and contains all color labels\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.labelNames).to.exist.and.to.be.an('object');\r",
							"    const colorLabels = [\"green\", \"yellow\", \"orange\", \"red\", \"purple\", \"blue\", \"sky\", \"lime\", \"pink\", \"black\", \"green_dark\", \"yellow_dark\", \"orange_dark\", \"red_dark\", \"purple_dark\", \"blue_dark\", \"sky_dark\", \"lime_dark\", \"pink_dark\", \"black_dark\", \"green_light\", \"yellow_light\", \"orange_light\", \"red_light\", \"purple_light\", \"blue_light\", \"sky_light\", \"lime_light\", \"pink_light\", \"black_light\"];\r",
							"    colorLabels.forEach(function(label) {\r",
							"        pm.expect(responseData.labelNames[label]).to.exist;\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{trello_post}}/boards/?name={{Name_board}}&key={{trello_key}}&token={{trello_toc}}",
					"host": [
						"{{trello_post}}"
					],
					"path": [
						"boards",
						""
					],
					"query": [
						{
							"key": "name",
							"value": "{{Name_board}}"
						},
						{
							"key": "key",
							"value": "{{trello_key}}"
						},
						{
							"key": "token",
							"value": "{{trello_toc}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "1.2 List Board",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let board_list_var = pm.response.json(\"\");\r",
							"pm.environment.set(\"list_id\",board_list_var[0][\"id\"]);",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Content type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Validate the structure of the response object\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(item) {",
							"        pm.expect(item).to.be.an('object');",
							"        pm.expect(item).to.have.property('id');",
							"        pm.expect(item).to.have.property('name');",
							"        pm.expect(item).to.have.property('closed');",
							"        pm.expect(item).to.have.property('color');",
							"        pm.expect(item).to.have.property('idBoard');",
							"        pm.expect(item).to.have.property('pos');",
							"        pm.expect(item).to.have.property('subscribed');",
							"        pm.expect(item).to.have.property('softLimit');",
							"        pm.expect(item).to.have.property('type');",
							"        pm.expect(item).to.have.property('datasource');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Id, name, and idBoard are non-empty strings\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"  ",
							"  responseData.forEach(function(list) {",
							"    pm.expect(list.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should not be empty\");",
							"    pm.expect(list.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
							"    pm.expect(list.idBoard).to.be.a('string').and.to.have.lengthOf.at.least(1, \"IdBoard should not be empty\");",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Closed field is a boolean value\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    responseData.forEach(function(list) {",
							"        pm.expect(list.closed).to.be.a('boolean');",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{trello_post}}/boards/:id/lists?key={{trello_key}}&token={{trello_toc}}",
					"host": [
						"{{trello_post}}"
					],
					"path": [
						"boards",
						":id",
						"lists"
					],
					"query": [
						{
							"key": "key",
							"value": "{{trello_key}}"
						},
						{
							"key": "token",
							"value": "{{trello_toc}}"
						}
					],
					"variable": [
						{
							"key": "id",
							"value": "{{board_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "1.3 List of list",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"packages": {},
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('id');",
							"    pm.expect(responseData).to.have.property('name');",
							"    pm.expect(responseData).to.have.property('closed');",
							"    pm.expect(responseData).to.have.property('idBoard');",
							"    pm.expect(responseData).to.have.property('pos');",
							"    pm.expect(responseData).to.have.property('type');",
							"    pm.expect(responseData).to.have.property('datasource');",
							"});",
							"",
							"",
							"pm.test(\"Id must be a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should be a non-empty string\");",
							"});",
							"",
							"",
							"pm.test(\"Closed is a boolean value\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.closed).to.be.a('boolean');",
							"});",
							"",
							"",
							"pm.test(\"Datasource object contains the 'filter' field and its value is a boolean\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.datasource).to.exist.and.to.be.an('object');",
							"  pm.expect(responseData.datasource.filter).to.exist.and.to.be.a('boolean');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{trello_post}}/lists/:id?key={{trello_key}}&token={{trello_toc}}",
					"host": [
						"{{trello_post}}"
					],
					"path": [
						"lists",
						":id"
					],
					"query": [
						{
							"key": "key",
							"value": "{{trello_key}}"
						},
						{
							"key": "token",
							"value": "{{trello_toc}}"
						}
					],
					"variable": [
						{
							"key": "id",
							"value": "{{list_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "1.4 ADD Card",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let board_id_card_var = pm.response.json();\r",
							"pm.environment.set(\"card_id\",board_id_card_var['id']);",
							"pm.test('Response status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"})",
							"",
							"pm.test('Response has the required fields', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.have.property('id');",
							"    pm.expect(responseData).to.have.property('badges');",
							"    pm.expect(responseData).to.have.property('closed');",
							"    pm.expect(responseData).to.have.property('dueComplete');",
							"    pm.expect(responseData).to.have.property('desc');",
							"    pm.expect(responseData).to.have.property('descData');",
							"    pm.expect(responseData).to.have.property('idLabels');",
							"    pm.expect(responseData).to.have.property('name');",
							"    pm.expect(responseData).to.have.property('pinned');",
							"    pm.expect(responseData).to.have.property('pos');",
							"    pm.expect(responseData).to.have.property('subscribed');",
							"    pm.expect(responseData).to.have.property('url');",
							"    pm.expect(responseData).to.have.property('cover');",
							"    pm.expect(responseData).to.have.property('isTemplate');",
							"})",
							"",
							"pm.test('Badges object contains expected keys', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.badges).to.be.an('object');",
							"    pm.expect(responseData.badges).to.include.all.keys('attachmentsByType', 'externalSource', 'location', 'votes', 'viewingMemberVoted', 'subscribed', 'attachments', 'fogbugz', 'checkItems', 'checkItemsChecked', 'checkItemsEarliestDue', 'comments', 'description', 'due', 'dueComplete', 'lastUpdatedByAi', 'start');",
							"})",
							"",
							"pm.test('Badges should exist and be an object', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.badges).to.exist.and.to.be.an('object');",
							"})",
							"",
							"pm.test('CheckItemStates should be an empty array', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.checkItemStates).to.be.an('array').that.is.empty;",
							"})",
							"",
							"pm.test('Name should be empty', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.name).to.be.empty;",
							"})",
							"",
							"pm.test('Labels should be an empty array', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.labels).to.be.an('array').that.is.empty;",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://api.trello.com/1/cards?idList={{list_id}}&key={{trello_key}}&token={{trello_toc}}",
					"protocol": "https",
					"host": [
						"api",
						"trello",
						"com"
					],
					"path": [
						"1",
						"cards"
					],
					"query": [
						{
							"key": "idList",
							"value": "{{list_id}}"
						},
						{
							"key": "key",
							"value": "{{trello_key}}"
						},
						{
							"key": "token",
							"value": "{{trello_toc}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "1.5 Edit Card",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Badges object is present and contains expected fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.badges).to.exist;",
							"    pm.expect(responseData.badges).to.have.property('attachmentsByType');",
							"    pm.expect(responseData.badges).to.have.property('externalSource');",
							"    pm.expect(responseData.badges).to.have.property('location');",
							"    pm.expect(responseData.badges).to.have.property('votes');",
							"    pm.expect(responseData.badges).to.have.property('viewingMemberVoted');",
							"    pm.expect(responseData.badges).to.have.property('subscribed');",
							"    pm.expect(responseData.badges).to.have.property('attachments');",
							"    pm.expect(responseData.badges).to.have.property('fogbugz');",
							"    pm.expect(responseData.badges).to.have.property('checkItems');",
							"    pm.expect(responseData.badges).to.have.property('checkItemsChecked');",
							"    pm.expect(responseData.badges).to.have.property('checkItemsEarliestDue');",
							"    pm.expect(responseData.badges).to.have.property('comments');",
							"    pm.expect(responseData.badges).to.have.property('description');",
							"    pm.expect(responseData.badges).to.have.property('due');",
							"    pm.expect(responseData.badges).to.have.property('dueComplete');",
							"    pm.expect(responseData.badges).to.have.property('lastUpdatedByAi');",
							"    pm.expect(responseData.badges).to.have.property('start');",
							"});",
							"",
							"",
							"pm.test(\"CheckItemStates array should be empty\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.checkItemStates).to.be.an('array').that.is.empty;",
							"});",
							"",
							"",
							"pm.test(\"Closed field should be a boolean value\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.closed).to.be.a('boolean');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://api.trello.com/1/cards/:id?key={{trello_key}}&token={{trello_toc}}&name=nametest",
					"protocol": "https",
					"host": [
						"api",
						"trello",
						"com"
					],
					"path": [
						"1",
						"cards",
						":id"
					],
					"query": [
						{
							"key": "key",
							"value": "{{trello_key}}"
						},
						{
							"key": "token",
							"value": "{{trello_toc}}"
						},
						{
							"key": "name",
							"value": "nametest"
						}
					],
					"variable": [
						{
							"key": "id",
							"value": "{{card_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "1.6 ADD Coment Card",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Data object should have non-empty idCard, text, and textData\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.data).to.be.an('object');",
							"  pm.expect(responseData.data.idCard).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"  pm.expect(responseData.data.text).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"  pm.expect(responseData.data.textData).to.exist.and.to.be.an('object').and.to.not.be.empty;",
							"});",
							"",
							"",
							"pm.test(\"Limits object contains valid values for reactions\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.limits.reactions).to.be.an('object');",
							"    pm.expect(responseData.limits.reactions.perAction.status).to.be.a('string');",
							"    pm.expect(responseData.limits.reactions.perAction.disableAt).to.be.a('number');",
							"    pm.expect(responseData.limits.reactions.perAction.warnAt).to.be.a('number');",
							"    pm.expect(responseData.limits.reactions.uniquePerAction.status).to.be.a('string');",
							"    pm.expect(responseData.limits.reactions.uniquePerAction.disableAt).to.be.a('number');",
							"    pm.expect(responseData.limits.reactions.uniquePerAction.warnAt).to.be.a('number');",
							"});",
							"",
							"",
							"pm.test(\"MemberCreator object has non-empty id and username\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.memberCreator).to.have.property('id').that.is.not.empty;",
							"    pm.expect(responseData.memberCreator).to.have.property('username').that.is.not.empty;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{trello_post}}/cards/:id/actions/comments?text=Random text&key={{trello_key}}&token={{trello_toc}}",
					"host": [
						"{{trello_post}}"
					],
					"path": [
						"cards",
						":id",
						"actions",
						"comments"
					],
					"query": [
						{
							"key": "text",
							"value": "Random text"
						},
						{
							"key": "key",
							"value": "{{trello_key}}"
						},
						{
							"key": "token",
							"value": "{{trello_toc}}"
						}
					],
					"variable": [
						{
							"key": "id",
							"value": "{{card_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "1.7 Get Card",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.all.keys(",
							"        'id', 'badges', 'checkItemStates', 'closed', 'dueComplete', 'dateLastActivity',",
							"        'desc', 'descData', 'due', 'dueReminder', 'email', 'idBoard', 'idChecklists',",
							"        'idList', 'idMembers', 'idMembersVoted', 'idShort', 'idAttachmentCover', 'labels',",
							"        'idLabels', 'manualCoverAttachment', 'name', 'pinned', 'pos', 'shortLink',",
							"        'shortUrl', 'start', 'subscribed', 'url', 'cover', 'isTemplate', 'cardRole', 'mirrorSourceId'",
							"    );",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{trello_post}}/cards/:id?key={{trello_key}}&token={{trello_toc}}",
					"host": [
						"{{trello_post}}"
					],
					"path": [
						"cards",
						":id"
					],
					"query": [
						{
							"key": "key",
							"value": "{{trello_key}}"
						},
						{
							"key": "token",
							"value": "{{trello_toc}}"
						}
					],
					"variable": [
						{
							"key": "id",
							"value": "{{card_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "1.8 Get Card Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test('Response status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"})",
							"",
							"pm.test('Response has the required fields', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.have.property('limits');",
							"})",
							"",
							"pm.test('Verify Content-Type header is application/json', function () {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
							"})",
							"",
							"pm.test('Key and token parameters are present in the request URL', function () {",
							"    const requestUrl = pm.request.url.toString();",
							"    pm.expect(requestUrl).to.include('key=').and.to.include('token=');",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{trello_post}}/cards/:id?key={{trello_key}}&token={{trello_toc}}",
					"host": [
						"{{trello_post}}"
					],
					"path": [
						"cards",
						":id"
					],
					"query": [
						{
							"key": "key",
							"value": "{{trello_key}}"
						},
						{
							"key": "token",
							"value": "{{trello_toc}}"
						}
					],
					"variable": [
						{
							"key": "id",
							"value": "{{card_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "1.9 Dell Board",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Response status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"})",
							"",
							"pm.test('Content-Type header is application/json', function () {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
							"})",
							"",
							"pm.test('Verify that the _value field is null', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData._value).to.equal(null);",
							"})",
							"",
							"pm.test('Key and token are not present in the response', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.not.have.property('key');",
							"    pm.expect(responseData).to.not.have.property('token');",
							"})",
							"",
							"pm.test('Response time is less than 200ms', function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(400);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{trello_post}}/boards/:idb?key={{trello_key}}&token={{trello_toc}}",
					"host": [
						"{{trello_post}}"
					],
					"path": [
						"boards",
						":idb"
					],
					"query": [
						{
							"key": "key",
							"value": "{{trello_key}}"
						},
						{
							"key": "token",
							"value": "{{trello_toc}}"
						}
					],
					"variable": [
						{
							"key": "idb",
							"value": "{{board_id}}"
						}
					]
				}
			},
			"response": []
		}
	]
}